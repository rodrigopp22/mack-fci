Abaixo temos a gram√°tica da linguagem MINI-PASCAL:

<i>
program ::= 'program' identifier;block

block ::= variable_declaration_part subroutine_declaration_part statement_part

variable_declaration_part ::= 'var' empty | variable_declaration; {variable_declaration;}

variable_declaration ::= identifier {',' identifier} ':' type

type ::= simple_type | array_type

array_type ::= 'array' '\['index_range'\]' 'of' simple_type

index_range ::= integer_const..integer_const

simple_type ::= char | integer | boolean

type_identifier ::= identifier

subroutine_declaration_part ::= procedure_declaration | function_declaration

procedure_declaration ::= 'procedure' identifier formal_parameters ';' block

function declaration ::= 'function' identifier formal_parameters ':' type ';' block

formal_parameters ::= '('param_section')'

param_section ::= variable_declaration {';' variable_declaration ';'} 

statement_part ::= compound_statement

compound_statement ::= 'begin' statement {';'statement} 'end'

statement ::= simple_statement | structured_statement

simple_statement ::= assignment_statement | function_procedure_statement | read_statement | write_statement

assignment_statement ::= variable ::= expression

function_procedure_statement ::= function_procedure_identifier | variable ::= function_procedure_identifier

function_procedure_identifier ::= identifier

read_statement ::= 'read' '('variable {',' variable} ')'
write_statement ::= 'write' '(' variable {',' variable} ')'

structured_statement ::= compound_statement | if_statement | while_statement
if_statement ::= 'if' expression 'then' statement | 'if' expression 'then' statement 'else' statement
while_statement ::= 'while' expression 'do' statement

expression ::= simple_expression | simple_expression relational_operator simple_expression
simple_expression ::= sign term { adding_operator term }
term ::= factor { multiplying_operator factor}
factor ::= variable | constant | '('expression')' | 'not' factor

relational_operator ::= '=' | '<>' | '<' | '<=' | '>=' | '>' | 'or' | 'and'
sign ::= '+' | '-' | empty
adding_operator ::= '+' | '-'
multiplying_operator ::= '*' | 'div'

variable ::= entire_variable | indexed_variable
indexed_variable ::= array_variable '[' expression ']'
array_variable ::= entire_variable
entire_variable ::= variable_identifier
variable_identifier ::= identifier

constant ::= integer_const | character_const | constant_identifier
constant_identifier ::= identifier
identifier ::= letter { letter_or_digit }
letter_or_digit ::= letter | digit
integer_const ::= digit { digit }
character_const ::= `'`letter_or_digit`'` | `"`letter_or_digit {letter_or_digit}`"`
letter ::= [a-z][A-Z]
digit ::= [0-9][0-9]
special_symbol ::= + | - | * | = | <> | < | > | <= | >= |

</i> 